// automatically generated by Xtext
grammar diro.geodes.VcsFeatures with org.eclipse.xtext.common.Terminals

import "http://www.example.org/vcsFeaturesMM" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

VCSFeatures returns VCSFeatures:
	{VCSFeatures}
	'VCSFeatures'
	name=EString
	'{'
		('commands' '{' commands+=Commands ( "," commands+=Commands)* '}' )?
		('history' '{' history+=History ( "," history+=History)* '}' )?
		('versionunit' '{' versionunit+=VersionUnit ( "," versionunit+=VersionUnit)* '}' )?
		('collaborationstyle' '{' collaborationstyle+=CollaborationStyle ( "," collaborationstyle+=CollaborationStyle)* '}' )?
		('database' '{' database+=Database ( "," database+=Database)* '}' )?
	'}';








Commands returns Commands:
	{Commands}
		'-' ('mergeStrategy' mergeStrategy=MergeStrategy)?
		'-' ('lowlevelcommand' '{' lowlevelcommand+=LowLevelCommand ( "," lowlevelcommand+=LowLevelCommand)* '}' )?
		'-' ('highlevelcommand' '{' highlevelcommand+=HighLevelCommand ( "," highlevelcommand+=HighLevelCommand)* '}' )?
		;

History returns History:
	{History}

		'-' ('labelType' labelType=LabelType)?
		'-' ('commitHistoryRange' commitHistoryRange=EInt)?
		'-' ('numberOfBranches' numberOfBranches=EInt)?
		;

VersionUnit returns VersionUnit:
	{VersionUnit}
		'-' ('granularity' '(' granularity+=VersionUnitType ( "," granularity+=VersionUnitType)* ')' )?
		;

CollaborationStyle returns CollaborationStyle:
	{CollaborationStyle}
		'-' ('collabStyle' collabStyle=CollaborationStyleType)?
		;

Database returns Database:
	{Database}
	'Database' '('
	'-' 'ConnectionString' connectionString=EString
	'-' ('DatabaseType' DatabaseType=DatabaseType)? ')'
		;

EString returns ecore::EString:
	STRING | ID;

enum MergeStrategy returns MergeStrategy:
				DSMCompare = 'DSMCompare' | GitDiff = 'GitDiff';

HighLevelCommand returns HighLevelCommand:
	{HighLevelCommand}
	'HighLevelCommand'
	name=EString
		('lowlevelcommand' '(' lowlevelcommand+=[LowLevelCommand|EString] ( "," lowlevelcommand+=[LowLevelCommand|EString])* ')' )?
		;

LowLevelCommand returns LowLevelCommand:
	'LowLevelCommand'
	 name=EString
		'(' 'command' command=LowCommands ')'
		;

enum LowCommands returns LowCommands:
				Add = 'Add' | Checkout = 'Checkout' | CheckoutCreate = 'CheckoutCreate' | Clone = 'Clone' | Commit = 'Commit' | CherryPick = 'CherryPick' | CreateBranch = 'CreateBranch' | Fetch = 'Fetch' | Init = 'Init' | Pull = 'Pull' | Push = 'Push' | RemoteAdd = 'RemoteAdd' | Rm = 'Rm' | Log = 'Log' | Open = 'Open';

enum LabelType returns LabelType:
				Unique = 'Unique' | CommitHash = 'CommitHash' | Label = 'Label';

EInt returns ecore::EInt:
	'-'? INT;

enum VersionUnitType returns VersionUnitType:
				Line = 'Line' | Semantic = 'Semantic' | File = 'File' | Element = 'Element';

enum CollaborationStyleType returns CollaborationStyleType:
				LocalOnly = 'LocalOnly' | Remote = 'Remote';

enum DatabaseType returns DatabaseType:
				MongoDB = 'MongoDB' | XMI = 'XMI' | Neo4J = 'Neo4J' | SQL = 'SQL';

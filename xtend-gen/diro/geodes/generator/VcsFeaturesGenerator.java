/**
 * generated by Xtext 2.32.0
 */
package diro.geodes.generator;

import java.util.ArrayList;
import library.commands.AddCommandGenerator;
import library.commands.CheckoutCommandGenerator;
import library.commands.CheckoutCreateCommandGenerator;
import library.commands.CloneCommandGenerator;
import library.commands.CommandGenerator;
import library.commands.CommitCommandGenerator;
import library.commands.CreateBranchCommandGenerator;
import library.commands.FetchCommandGenerator;
import library.commands.ICommandGenerator;
import library.commands.InitCommandGenerator;
import library.commands.LogCommandGenerator;
import library.commands.OpenCommandGenerator;
import library.commands.PullCommandGenerator;
import library.commands.PushCommandGenerator;
import library.commands.RemoteAddCommandGenerator;
import library.commands.RmCommandGenerator;
import library.controllers.ControllerGenerator;
import library.controllers.IVcsControllerGenerator;
import library.controllers.PorcelainControllerGenerator;
import library.dialogs.AddDialogGenerator;
import library.dialogs.CheckoutCreateDialogGenerator;
import library.dialogs.CheckoutDialogGenerator;
import library.dialogs.CloneDialogGenerator;
import library.dialogs.CommitDialogGenerator;
import library.dialogs.CreateBranchDialogGenerator;
import library.dialogs.DialogGenerator;
import library.dialogs.DialogUtilsGenerator;
import library.dialogs.FetchDialogGenerator;
import library.dialogs.InitDialogGenerator;
import library.dialogs.LogDialogGenerator;
import library.dialogs.OpenDialogGenerator;
import library.dialogs.PathDialogGenerator;
import library.dialogs.PullDialogGenerator;
import library.dialogs.PushDialogGenerator;
import library.dialogs.RemoteAddDialogGenerator;
import library.dialogs.RmDialogGenerator;
import library.functions.FunctionGenerator;
import library.functions.JGitRepositoryAPIGenerator;
import library.handlers.AddHandlerGenerator;
import library.handlers.CheckoutCreateHandlerGenerator;
import library.handlers.CheckoutHandlerGenerator;
import library.handlers.CloneHandlerGenerator;
import library.handlers.CommitHandlerGenerator;
import library.handlers.CreateBranchHandlerGenerator;
import library.handlers.FetchHandlerGenerator;
import library.handlers.HandlerGenerator;
import library.handlers.InitHandlerGenerator;
import library.handlers.LogHandlerGenerator;
import library.handlers.OpenHandlerGenerator;
import library.handlers.PullHandlerGenerator;
import library.handlers.PushHandlerGenerator;
import library.handlers.RemoteAddHandlerGenerator;
import library.handlers.RmHandlerGenerator;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class VcsFeaturesGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final ArrayList<CommandGenerator> commands = new ArrayList<CommandGenerator>();
    AddCommandGenerator _addCommandGenerator = new AddCommandGenerator();
    commands.add(_addCommandGenerator);
    CheckoutCommandGenerator _checkoutCommandGenerator = new CheckoutCommandGenerator();
    commands.add(_checkoutCommandGenerator);
    CheckoutCreateCommandGenerator _checkoutCreateCommandGenerator = new CheckoutCreateCommandGenerator();
    commands.add(_checkoutCreateCommandGenerator);
    CloneCommandGenerator _cloneCommandGenerator = new CloneCommandGenerator();
    commands.add(_cloneCommandGenerator);
    CommitCommandGenerator _commitCommandGenerator = new CommitCommandGenerator();
    commands.add(_commitCommandGenerator);
    CreateBranchCommandGenerator _createBranchCommandGenerator = new CreateBranchCommandGenerator();
    commands.add(_createBranchCommandGenerator);
    FetchCommandGenerator _fetchCommandGenerator = new FetchCommandGenerator();
    commands.add(_fetchCommandGenerator);
    ICommandGenerator _iCommandGenerator = new ICommandGenerator();
    commands.add(_iCommandGenerator);
    InitCommandGenerator _initCommandGenerator = new InitCommandGenerator();
    commands.add(_initCommandGenerator);
    LogCommandGenerator _logCommandGenerator = new LogCommandGenerator();
    commands.add(_logCommandGenerator);
    OpenCommandGenerator _openCommandGenerator = new OpenCommandGenerator();
    commands.add(_openCommandGenerator);
    PullCommandGenerator _pullCommandGenerator = new PullCommandGenerator();
    commands.add(_pullCommandGenerator);
    PushCommandGenerator _pushCommandGenerator = new PushCommandGenerator();
    commands.add(_pushCommandGenerator);
    RemoteAddCommandGenerator _remoteAddCommandGenerator = new RemoteAddCommandGenerator();
    commands.add(_remoteAddCommandGenerator);
    RmCommandGenerator _rmCommandGenerator = new RmCommandGenerator();
    commands.add(_rmCommandGenerator);
    for (final CommandGenerator cg : commands) {
      String _get = (cg.getClass().getName().split("Generator")[0]).split("library.commands.")[1];
      String _plus = ("commands/" + _get);
      String _plus_1 = (_plus + ".java");
      fsa.generateFile(_plus_1, cg.generate());
    }
    final ArrayList<HandlerGenerator> handlers = new ArrayList<HandlerGenerator>();
    AddHandlerGenerator _addHandlerGenerator = new AddHandlerGenerator();
    handlers.add(_addHandlerGenerator);
    CheckoutHandlerGenerator _checkoutHandlerGenerator = new CheckoutHandlerGenerator();
    handlers.add(_checkoutHandlerGenerator);
    CheckoutCreateHandlerGenerator _checkoutCreateHandlerGenerator = new CheckoutCreateHandlerGenerator();
    handlers.add(_checkoutCreateHandlerGenerator);
    CloneHandlerGenerator _cloneHandlerGenerator = new CloneHandlerGenerator();
    handlers.add(_cloneHandlerGenerator);
    CommitHandlerGenerator _commitHandlerGenerator = new CommitHandlerGenerator();
    handlers.add(_commitHandlerGenerator);
    CreateBranchHandlerGenerator _createBranchHandlerGenerator = new CreateBranchHandlerGenerator();
    handlers.add(_createBranchHandlerGenerator);
    FetchHandlerGenerator _fetchHandlerGenerator = new FetchHandlerGenerator();
    handlers.add(_fetchHandlerGenerator);
    InitHandlerGenerator _initHandlerGenerator = new InitHandlerGenerator();
    handlers.add(_initHandlerGenerator);
    LogHandlerGenerator _logHandlerGenerator = new LogHandlerGenerator();
    handlers.add(_logHandlerGenerator);
    OpenHandlerGenerator _openHandlerGenerator = new OpenHandlerGenerator();
    handlers.add(_openHandlerGenerator);
    PullHandlerGenerator _pullHandlerGenerator = new PullHandlerGenerator();
    handlers.add(_pullHandlerGenerator);
    PushHandlerGenerator _pushHandlerGenerator = new PushHandlerGenerator();
    handlers.add(_pushHandlerGenerator);
    RemoteAddHandlerGenerator _remoteAddHandlerGenerator = new RemoteAddHandlerGenerator();
    handlers.add(_remoteAddHandlerGenerator);
    RmHandlerGenerator _rmHandlerGenerator = new RmHandlerGenerator();
    handlers.add(_rmHandlerGenerator);
    for (final HandlerGenerator hg : handlers) {
      String _get_1 = (hg.getClass().getName().split("Generator")[0]).split("library.handlers.")[1];
      String _plus_2 = ("handlers/" + _get_1);
      String _plus_3 = (_plus_2 + ".java");
      fsa.generateFile(_plus_3, hg.generate());
    }
    final ArrayList<DialogGenerator> dialogs = new ArrayList<DialogGenerator>();
    AddDialogGenerator _addDialogGenerator = new AddDialogGenerator();
    dialogs.add(_addDialogGenerator);
    CheckoutDialogGenerator _checkoutDialogGenerator = new CheckoutDialogGenerator();
    dialogs.add(_checkoutDialogGenerator);
    CheckoutCreateDialogGenerator _checkoutCreateDialogGenerator = new CheckoutCreateDialogGenerator();
    dialogs.add(_checkoutCreateDialogGenerator);
    CloneDialogGenerator _cloneDialogGenerator = new CloneDialogGenerator();
    dialogs.add(_cloneDialogGenerator);
    CommitDialogGenerator _commitDialogGenerator = new CommitDialogGenerator();
    dialogs.add(_commitDialogGenerator);
    CreateBranchDialogGenerator _createBranchDialogGenerator = new CreateBranchDialogGenerator();
    dialogs.add(_createBranchDialogGenerator);
    DialogUtilsGenerator _dialogUtilsGenerator = new DialogUtilsGenerator();
    dialogs.add(_dialogUtilsGenerator);
    FetchDialogGenerator _fetchDialogGenerator = new FetchDialogGenerator();
    dialogs.add(_fetchDialogGenerator);
    InitDialogGenerator _initDialogGenerator = new InitDialogGenerator();
    dialogs.add(_initDialogGenerator);
    LogDialogGenerator _logDialogGenerator = new LogDialogGenerator();
    dialogs.add(_logDialogGenerator);
    OpenDialogGenerator _openDialogGenerator = new OpenDialogGenerator();
    dialogs.add(_openDialogGenerator);
    PathDialogGenerator _pathDialogGenerator = new PathDialogGenerator();
    dialogs.add(_pathDialogGenerator);
    PullDialogGenerator _pullDialogGenerator = new PullDialogGenerator();
    dialogs.add(_pullDialogGenerator);
    PushDialogGenerator _pushDialogGenerator = new PushDialogGenerator();
    dialogs.add(_pushDialogGenerator);
    RemoteAddDialogGenerator _remoteAddDialogGenerator = new RemoteAddDialogGenerator();
    dialogs.add(_remoteAddDialogGenerator);
    RmDialogGenerator _rmDialogGenerator = new RmDialogGenerator();
    dialogs.add(_rmDialogGenerator);
    for (final DialogGenerator dg : dialogs) {
      String _get_2 = (dg.getClass().getName().split("Generator")[0]).split("library.dialogs.")[1];
      String _plus_4 = ("dialogs/" + _get_2);
      String _plus_5 = (_plus_4 + ".java");
      fsa.generateFile(_plus_5, dg.generate());
    }
    final ArrayList<ControllerGenerator> controllers = new ArrayList<ControllerGenerator>();
    IVcsControllerGenerator _iVcsControllerGenerator = new IVcsControllerGenerator();
    controllers.add(_iVcsControllerGenerator);
    PorcelainControllerGenerator _porcelainControllerGenerator = new PorcelainControllerGenerator();
    controllers.add(_porcelainControllerGenerator);
    for (final ControllerGenerator cg_1 : controllers) {
      String _get_3 = (cg_1.getClass().getName().split("Generator")[0]).split("library.controllers.")[1];
      String _plus_6 = ("controllers/" + _get_3);
      String _plus_7 = (_plus_6 + ".java");
      fsa.generateFile(_plus_7, cg_1.generate());
    }
    final ArrayList<FunctionGenerator> functions = new ArrayList<FunctionGenerator>();
    JGitRepositoryAPIGenerator _jGitRepositoryAPIGenerator = new JGitRepositoryAPIGenerator();
    functions.add(_jGitRepositoryAPIGenerator);
    for (final FunctionGenerator fg : functions) {
      String _get_4 = (fg.getClass().getName().split("Generator")[0]).split("library.functions.")[1];
      String _plus_8 = ("functions/" + _get_4);
      String _plus_9 = (_plus_8 + ".java");
      fsa.generateFile(_plus_9, fg.generate());
    }
  }
}

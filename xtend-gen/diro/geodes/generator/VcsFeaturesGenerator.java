/**
 * generated by Xtext 2.32.0
 */
package diro.geodes.generator;

import com.google.common.collect.Iterators;
import configs.ConfigGenerator;
import configs.PluginGenerator;
import java.util.ArrayList;
import library.commands.AddCommandGenerator;
import library.commands.CheckoutCommandGenerator;
import library.commands.CheckoutCreateCommandGenerator;
import library.commands.CloneCommandGenerator;
import library.commands.CommandGenerator;
import library.commands.CommitCommandGenerator;
import library.commands.CreateBranchCommandGenerator;
import library.commands.FetchCommandGenerator;
import library.commands.ICommandGenerator;
import library.commands.InitCommandGenerator;
import library.commands.LogCommandGenerator;
import library.commands.OpenCommandGenerator;
import library.commands.PullCommandGenerator;
import library.commands.PushCommandGenerator;
import library.commands.RemoteAddCommandGenerator;
import library.commands.RmCommandGenerator;
import library.controllers.ControllerGenerator;
import library.controllers.IVcsControllerGenerator;
import library.controllers.PorcelainControllerGenerator;
import library.dialogs.AddDialogGenerator;
import library.dialogs.CheckoutCreateDialogGenerator;
import library.dialogs.CheckoutDialogGenerator;
import library.dialogs.CloneDialogGenerator;
import library.dialogs.CommitDialogGenerator;
import library.dialogs.CreateBranchDialogGenerator;
import library.dialogs.DialogGenerator;
import library.dialogs.DialogUtilsGenerator;
import library.dialogs.FetchDialogGenerator;
import library.dialogs.InitDialogGenerator;
import library.dialogs.LogDialogGenerator;
import library.dialogs.OpenDialogGenerator;
import library.dialogs.PathDialogGenerator;
import library.dialogs.PullDialogGenerator;
import library.dialogs.PushDialogGenerator;
import library.dialogs.RemoteAddDialogGenerator;
import library.dialogs.RmDialogGenerator;
import library.functions.FunctionGenerator;
import library.functions.JGitRepositoryAPIGenerator;
import library.handlers.AddHandlerGenerator;
import library.handlers.CheckoutCreateHandlerGenerator;
import library.handlers.CheckoutHandlerGenerator;
import library.handlers.CloneHandlerGenerator;
import library.handlers.CommitHandlerGenerator;
import library.handlers.CreateBranchHandlerGenerator;
import library.handlers.FetchHandlerGenerator;
import library.handlers.HandlerGenerator;
import library.handlers.InitHandlerGenerator;
import library.handlers.LogHandlerGenerator;
import library.handlers.OpenHandlerGenerator;
import library.handlers.PullHandlerGenerator;
import library.handlers.PushHandlerGenerator;
import library.handlers.RemoteAddHandlerGenerator;
import library.handlers.RmHandlerGenerator;
import metainf.ManifestGenerator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import vcsFeaturesMM.HighLevelCommand;
import vcsFeaturesMM.LowLevelCommand;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class VcsFeaturesGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final ArrayList<CommandGenerator> commands = new ArrayList<CommandGenerator>();
    AddCommandGenerator _addCommandGenerator = new AddCommandGenerator();
    commands.add(_addCommandGenerator);
    CheckoutCommandGenerator _checkoutCommandGenerator = new CheckoutCommandGenerator();
    commands.add(_checkoutCommandGenerator);
    CheckoutCreateCommandGenerator _checkoutCreateCommandGenerator = new CheckoutCreateCommandGenerator();
    commands.add(_checkoutCreateCommandGenerator);
    CloneCommandGenerator _cloneCommandGenerator = new CloneCommandGenerator();
    commands.add(_cloneCommandGenerator);
    CommitCommandGenerator _commitCommandGenerator = new CommitCommandGenerator();
    commands.add(_commitCommandGenerator);
    CreateBranchCommandGenerator _createBranchCommandGenerator = new CreateBranchCommandGenerator();
    commands.add(_createBranchCommandGenerator);
    FetchCommandGenerator _fetchCommandGenerator = new FetchCommandGenerator();
    commands.add(_fetchCommandGenerator);
    ICommandGenerator _iCommandGenerator = new ICommandGenerator();
    commands.add(_iCommandGenerator);
    InitCommandGenerator _initCommandGenerator = new InitCommandGenerator();
    commands.add(_initCommandGenerator);
    LogCommandGenerator _logCommandGenerator = new LogCommandGenerator();
    commands.add(_logCommandGenerator);
    OpenCommandGenerator _openCommandGenerator = new OpenCommandGenerator();
    commands.add(_openCommandGenerator);
    PullCommandGenerator _pullCommandGenerator = new PullCommandGenerator();
    commands.add(_pullCommandGenerator);
    PushCommandGenerator _pushCommandGenerator = new PushCommandGenerator();
    commands.add(_pushCommandGenerator);
    RemoteAddCommandGenerator _remoteAddCommandGenerator = new RemoteAddCommandGenerator();
    commands.add(_remoteAddCommandGenerator);
    RmCommandGenerator _rmCommandGenerator = new RmCommandGenerator();
    commands.add(_rmCommandGenerator);
    for (final CommandGenerator cg : commands) {
      String _get = (cg.getClass().getName().split("Generator")[0]).split("library.commands.")[1];
      String _plus = ("commands/" + _get);
      String _plus_1 = (_plus + ".java");
      fsa.generateFile(_plus_1, cg.generate());
    }
    Iterable<HighLevelCommand> _iterable = IteratorExtensions.<HighLevelCommand>toIterable(Iterators.<HighLevelCommand>filter(resource.getAllContents(), HighLevelCommand.class));
    for (final HighLevelCommand superCommand : _iterable) {
      {
        String _name = superCommand.getName();
        String _plus_2 = ("commands/" + _name);
        String _plus_3 = (_plus_2 + "Command.java");
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("package commands;");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("public class ");
        String _name_1 = superCommand.getName();
        String _plus_4 = (_name_1 + "Command");
        _builder.append(_plus_4, "\t\t\t");
        _builder.append(" extends SuperCommand {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        fsa.generateFile(_plus_3, _builder);
        String _name_2 = superCommand.getName();
        String _plus_5 = ("handlers/" + _name_2);
        String _plus_6 = (_plus_5 + "Handler.java");
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("package handlers;");
        _builder_1.newLine();
        _builder_1.newLine();
        _builder_1.append("import org.eclipse.core.commands.AbstractHandler;");
        _builder_1.newLine();
        _builder_1.append("import org.eclipse.core.commands.ExecutionEvent;");
        _builder_1.newLine();
        _builder_1.append("import org.eclipse.core.commands.ExecutionException;");
        _builder_1.newLine();
        _builder_1.append("import org.eclipse.jface.window.Window;");
        _builder_1.newLine();
        _builder_1.append("import org.eclipse.ui.IWorkbenchWindow;");
        _builder_1.newLine();
        _builder_1.append("import org.eclipse.ui.handlers.HandlerUtil;");
        _builder_1.newLine();
        _builder_1.append("import org.eclipse.jface.dialogs.TitleAreaDialog;");
        _builder_1.newLine();
        _builder_1.append("import commands.ICommand;");
        _builder_1.newLine();
        {
          EList<LowLevelCommand> _lowlevelcommand = superCommand.getLowlevelcommand();
          for(final LowLevelCommand lowCommands : _lowlevelcommand) {
            _builder_1.append("import handlers.");
            String _get_1 = lowCommands.getCommand().getName().split("Command")[0];
            String _plus_7 = (_get_1 + "Handler");
            _builder_1.append(_plus_7);
            _builder_1.newLineIfNotEmpty();
          }
        }
        _builder_1.newLine();
        _builder_1.append("public class ");
        String _name_3 = superCommand.getName();
        String _plus_8 = (_name_3 + "Handler");
        _builder_1.append(_plus_8);
        _builder_1.append(" extends AbstractHandler {");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t");
        _builder_1.append("@Override");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("public Object execute(ExecutionEvent event) throws ExecutionException {");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("// get workbench window");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("IWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);");
        _builder_1.newLine();
        {
          EList<LowLevelCommand> _lowlevelcommand_1 = superCommand.getLowlevelcommand();
          for(final LowLevelCommand lowCommands_1 : _lowlevelcommand_1) {
            _builder_1.append("\t\t");
            _builder_1.append("new ");
            String _get_2 = lowCommands_1.getCommand().getName().split("Command")[0];
            String _plus_9 = (_get_2 + "Handler");
            _builder_1.append(_plus_9, "\t\t");
            _builder_1.append("().execute(event);");
            _builder_1.newLineIfNotEmpty();
          }
        }
        _builder_1.append("\t\t");
        _builder_1.append("return null;");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append("}");
        fsa.generateFile(_plus_6, _builder_1);
      }
    }
    final ArrayList<HandlerGenerator> handlers = new ArrayList<HandlerGenerator>();
    AddHandlerGenerator _addHandlerGenerator = new AddHandlerGenerator();
    handlers.add(_addHandlerGenerator);
    CheckoutHandlerGenerator _checkoutHandlerGenerator = new CheckoutHandlerGenerator();
    handlers.add(_checkoutHandlerGenerator);
    CheckoutCreateHandlerGenerator _checkoutCreateHandlerGenerator = new CheckoutCreateHandlerGenerator();
    handlers.add(_checkoutCreateHandlerGenerator);
    CloneHandlerGenerator _cloneHandlerGenerator = new CloneHandlerGenerator();
    handlers.add(_cloneHandlerGenerator);
    CommitHandlerGenerator _commitHandlerGenerator = new CommitHandlerGenerator();
    handlers.add(_commitHandlerGenerator);
    CreateBranchHandlerGenerator _createBranchHandlerGenerator = new CreateBranchHandlerGenerator();
    handlers.add(_createBranchHandlerGenerator);
    FetchHandlerGenerator _fetchHandlerGenerator = new FetchHandlerGenerator();
    handlers.add(_fetchHandlerGenerator);
    InitHandlerGenerator _initHandlerGenerator = new InitHandlerGenerator();
    handlers.add(_initHandlerGenerator);
    LogHandlerGenerator _logHandlerGenerator = new LogHandlerGenerator();
    handlers.add(_logHandlerGenerator);
    OpenHandlerGenerator _openHandlerGenerator = new OpenHandlerGenerator();
    handlers.add(_openHandlerGenerator);
    PullHandlerGenerator _pullHandlerGenerator = new PullHandlerGenerator();
    handlers.add(_pullHandlerGenerator);
    PushHandlerGenerator _pushHandlerGenerator = new PushHandlerGenerator();
    handlers.add(_pushHandlerGenerator);
    RemoteAddHandlerGenerator _remoteAddHandlerGenerator = new RemoteAddHandlerGenerator();
    handlers.add(_remoteAddHandlerGenerator);
    RmHandlerGenerator _rmHandlerGenerator = new RmHandlerGenerator();
    handlers.add(_rmHandlerGenerator);
    for (final HandlerGenerator hg : handlers) {
      String _get_1 = (hg.getClass().getName().split("Generator")[0]).split("library.handlers.")[1];
      String _plus_2 = ("handlers/" + _get_1);
      String _plus_3 = (_plus_2 + ".java");
      fsa.generateFile(_plus_3, hg.generate());
    }
    final ArrayList<DialogGenerator> dialogs = new ArrayList<DialogGenerator>();
    AddDialogGenerator _addDialogGenerator = new AddDialogGenerator();
    dialogs.add(_addDialogGenerator);
    CheckoutDialogGenerator _checkoutDialogGenerator = new CheckoutDialogGenerator();
    dialogs.add(_checkoutDialogGenerator);
    CheckoutCreateDialogGenerator _checkoutCreateDialogGenerator = new CheckoutCreateDialogGenerator();
    dialogs.add(_checkoutCreateDialogGenerator);
    CloneDialogGenerator _cloneDialogGenerator = new CloneDialogGenerator();
    dialogs.add(_cloneDialogGenerator);
    CommitDialogGenerator _commitDialogGenerator = new CommitDialogGenerator();
    dialogs.add(_commitDialogGenerator);
    CreateBranchDialogGenerator _createBranchDialogGenerator = new CreateBranchDialogGenerator();
    dialogs.add(_createBranchDialogGenerator);
    DialogUtilsGenerator _dialogUtilsGenerator = new DialogUtilsGenerator();
    dialogs.add(_dialogUtilsGenerator);
    FetchDialogGenerator _fetchDialogGenerator = new FetchDialogGenerator();
    dialogs.add(_fetchDialogGenerator);
    InitDialogGenerator _initDialogGenerator = new InitDialogGenerator();
    dialogs.add(_initDialogGenerator);
    LogDialogGenerator _logDialogGenerator = new LogDialogGenerator();
    dialogs.add(_logDialogGenerator);
    OpenDialogGenerator _openDialogGenerator = new OpenDialogGenerator();
    dialogs.add(_openDialogGenerator);
    PathDialogGenerator _pathDialogGenerator = new PathDialogGenerator();
    dialogs.add(_pathDialogGenerator);
    PullDialogGenerator _pullDialogGenerator = new PullDialogGenerator();
    dialogs.add(_pullDialogGenerator);
    PushDialogGenerator _pushDialogGenerator = new PushDialogGenerator();
    dialogs.add(_pushDialogGenerator);
    RemoteAddDialogGenerator _remoteAddDialogGenerator = new RemoteAddDialogGenerator();
    dialogs.add(_remoteAddDialogGenerator);
    RmDialogGenerator _rmDialogGenerator = new RmDialogGenerator();
    dialogs.add(_rmDialogGenerator);
    for (final DialogGenerator dg : dialogs) {
      String _get_2 = (dg.getClass().getName().split("Generator")[0]).split("library.dialogs.")[1];
      String _plus_4 = ("dialogs/" + _get_2);
      String _plus_5 = (_plus_4 + ".java");
      fsa.generateFile(_plus_5, dg.generate());
    }
    final ArrayList<ControllerGenerator> controllers = new ArrayList<ControllerGenerator>();
    IVcsControllerGenerator _iVcsControllerGenerator = new IVcsControllerGenerator();
    controllers.add(_iVcsControllerGenerator);
    PorcelainControllerGenerator _porcelainControllerGenerator = new PorcelainControllerGenerator();
    controllers.add(_porcelainControllerGenerator);
    for (final ControllerGenerator cg_1 : controllers) {
      String _get_3 = (cg_1.getClass().getName().split("Generator")[0]).split("library.controllers.")[1];
      String _plus_6 = ("controllers/" + _get_3);
      String _plus_7 = (_plus_6 + ".java");
      fsa.generateFile(_plus_7, cg_1.generate());
    }
    final ArrayList<FunctionGenerator> functions = new ArrayList<FunctionGenerator>();
    JGitRepositoryAPIGenerator _jGitRepositoryAPIGenerator = new JGitRepositoryAPIGenerator();
    functions.add(_jGitRepositoryAPIGenerator);
    for (final FunctionGenerator fg : functions) {
      String _get_4 = (fg.getClass().getName().split("Generator")[0]).split("library.functions.")[1];
      String _plus_8 = ("functions/" + _get_4);
      String _plus_9 = (_plus_8 + ".java");
      fsa.generateFile(_plus_9, fg.generate());
    }
    final ArrayList<ManifestGenerator> manifest = new ArrayList<ManifestGenerator>();
    ManifestGenerator _manifestGenerator = new ManifestGenerator();
    manifest.add(_manifestGenerator);
    for (final ManifestGenerator man : manifest) {
      fsa.generateFile(("META-INF/" + "MANIFEST.MF"), man.generate());
    }
    final ArrayList<ConfigGenerator> plugins = new ArrayList<ConfigGenerator>();
    PluginGenerator _pluginGenerator = new PluginGenerator();
    plugins.add(_pluginGenerator);
    for (final ConfigGenerator plug : plugins) {
      fsa.generateFile("plugin.xml", plug.generate(resource));
    }
  }
}

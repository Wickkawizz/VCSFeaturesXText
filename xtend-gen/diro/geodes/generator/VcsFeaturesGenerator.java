/**
 * generated by Xtext 2.32.0
 */
package diro.geodes.generator;

import java.util.ArrayList;
import library.commands.AddCommandGenerator;
import library.commands.CheckoutCommandGenerator;
import library.commands.CheckoutCreateCommandGenerator;
import library.commands.CloneCommandGenerator;
import library.commands.CommandGenerator;
import library.commands.CommitCommandGenerator;
import library.commands.CreateBranchCommandGenerator;
import library.commands.FetchCommandGenerator;
import library.commands.ICommandGenerator;
import library.commands.InitCommandGenerator;
import library.commands.LogCommandGenerator;
import library.commands.OpenCommandGenerator;
import library.commands.PullCommandGenerator;
import library.commands.PushCommandGenerator;
import library.commands.RemoteAddCommandGenerator;
import library.commands.RmCommandGenerator;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class VcsFeaturesGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      final IProgressMonitor progressMonitor = new NullProgressMonitor();
      final IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
      final IProject project = root.getProject("VCSFeatures");
      project.create(progressMonitor);
      project.open(progressMonitor);
      final String projectPath = project.getFullPath().toString();
      final ArrayList<CommandGenerator> commands = new ArrayList<CommandGenerator>();
      AddCommandGenerator _addCommandGenerator = new AddCommandGenerator();
      commands.add(_addCommandGenerator);
      CheckoutCommandGenerator _checkoutCommandGenerator = new CheckoutCommandGenerator();
      commands.add(_checkoutCommandGenerator);
      CheckoutCreateCommandGenerator _checkoutCreateCommandGenerator = new CheckoutCreateCommandGenerator();
      commands.add(_checkoutCreateCommandGenerator);
      CloneCommandGenerator _cloneCommandGenerator = new CloneCommandGenerator();
      commands.add(_cloneCommandGenerator);
      CommitCommandGenerator _commitCommandGenerator = new CommitCommandGenerator();
      commands.add(_commitCommandGenerator);
      CreateBranchCommandGenerator _createBranchCommandGenerator = new CreateBranchCommandGenerator();
      commands.add(_createBranchCommandGenerator);
      FetchCommandGenerator _fetchCommandGenerator = new FetchCommandGenerator();
      commands.add(_fetchCommandGenerator);
      ICommandGenerator _iCommandGenerator = new ICommandGenerator();
      commands.add(_iCommandGenerator);
      InitCommandGenerator _initCommandGenerator = new InitCommandGenerator();
      commands.add(_initCommandGenerator);
      LogCommandGenerator _logCommandGenerator = new LogCommandGenerator();
      commands.add(_logCommandGenerator);
      OpenCommandGenerator _openCommandGenerator = new OpenCommandGenerator();
      commands.add(_openCommandGenerator);
      PullCommandGenerator _pullCommandGenerator = new PullCommandGenerator();
      commands.add(_pullCommandGenerator);
      PushCommandGenerator _pushCommandGenerator = new PushCommandGenerator();
      commands.add(_pushCommandGenerator);
      RemoteAddCommandGenerator _remoteAddCommandGenerator = new RemoteAddCommandGenerator();
      commands.add(_remoteAddCommandGenerator);
      RmCommandGenerator _rmCommandGenerator = new RmCommandGenerator();
      commands.add(_rmCommandGenerator);
      for (final CommandGenerator cg : commands) {
        String _get = cg.getClass().getName().split("Generator")[0];
        String _plus = ((projectPath + "/src/") + _get);
        String _plus_1 = (_plus + ".java");
        fsa.generateFile(_plus_1, cg.generate());
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}

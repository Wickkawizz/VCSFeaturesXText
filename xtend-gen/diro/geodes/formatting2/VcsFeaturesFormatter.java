/**
 * generated by Xtext 2.32.0
 */
package diro.geodes.formatting2;

import com.google.inject.Inject;
import diro.geodes.services.VcsFeaturesGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import vcsFeaturesMM.CollaborationStyle;
import vcsFeaturesMM.Commands;
import vcsFeaturesMM.Database;
import vcsFeaturesMM.HighLevelCommand;
import vcsFeaturesMM.History;
import vcsFeaturesMM.LowLevelCommand;
import vcsFeaturesMM.VCSFeatures;
import vcsFeaturesMM.VersionUnit;

@SuppressWarnings("all")
public class VcsFeaturesFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private VcsFeaturesGrammarAccess _vcsFeaturesGrammarAccess;

  protected void _format(final VCSFeatures vCSFeatures, @Extension final IFormattableDocument document) {
    EList<Commands> _commands = vCSFeatures.getCommands();
    for (final Commands commands : _commands) {
      document.<Commands>format(commands);
    }
    EList<History> _history = vCSFeatures.getHistory();
    for (final History history : _history) {
      document.<History>format(history);
    }
    EList<VersionUnit> _versionunit = vCSFeatures.getVersionunit();
    for (final VersionUnit versionUnit : _versionunit) {
      document.<VersionUnit>format(versionUnit);
    }
    EList<CollaborationStyle> _collaborationstyle = vCSFeatures.getCollaborationstyle();
    for (final CollaborationStyle collaborationStyle : _collaborationstyle) {
      document.<CollaborationStyle>format(collaborationStyle);
    }
    EList<Database> _database = vCSFeatures.getDatabase();
    for (final Database database : _database) {
      document.<Database>format(database);
    }
  }

  protected void _format(final Commands commands, @Extension final IFormattableDocument document) {
    EList<HighLevelCommand> _highlevelcommand = commands.getHighlevelcommand();
    for (final HighLevelCommand highLevelCommand : _highlevelcommand) {
      document.<HighLevelCommand>format(highLevelCommand);
    }
    EList<LowLevelCommand> _lowlevelcommand = commands.getLowlevelcommand();
    for (final LowLevelCommand lowLevelCommand : _lowlevelcommand) {
      document.<LowLevelCommand>format(lowLevelCommand);
    }
  }

  public void format(final Object commands, final IFormattableDocument document) {
    if (commands instanceof XtextResource) {
      _format((XtextResource)commands, document);
      return;
    } else if (commands instanceof Commands) {
      _format((Commands)commands, document);
      return;
    } else if (commands instanceof VCSFeatures) {
      _format((VCSFeatures)commands, document);
      return;
    } else if (commands instanceof EObject) {
      _format((EObject)commands, document);
      return;
    } else if (commands == null) {
      _format((Void)null, document);
      return;
    } else if (commands != null) {
      _format(commands, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(commands, document).toString());
    }
  }
}

package library.controllers;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class IVcsControllerGenerator {
  public CharSequence generate() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package controllers;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.api.Git;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.revwalk.RevCommit;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public interface IVcsController {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<Git> getRepositories();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void registerRepository(Git repo);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// TODO UNTESTED. I don\'t know what the format looks like, I\'m just taking a");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// stab in the dark that the name of the repository is contained in the ID of");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// the repository.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Git getRepository(String name);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Get the current work directory and may return null if no repository have been");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* initialized.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return {@link Git} or {@link <code>null</code>}");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Git getWorkspace();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Change the current working directory to execute the commands on.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void changeWorkspace(Git repo);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void initLocalDirectory(String directory);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void checkoutCommand(Git git, String branchName);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void addCommand(Git git, List<String> paths);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void createBranch(Git git, String branchName);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void fetchCommand(Git git, String remoteName, String remoteBranchName, String username, String password);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void remoteAddCommand(String remoteHttpUrl, String remoteName);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void rmCommand(List<String> paths);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<String> getBranchesClean();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void checkoutCreateCommand(Git git, String branchName);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void cloneRepository(String remoteRepo, String directory, String username, String password,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Boolean cloneAllbranches);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void commit(String commitMessage);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<String> getRemoteBranchesClean();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<String> remoteListClean();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void pullCommand(String username, String password);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void pushCommand(String username, String password);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Iterable<RevCommit> logCommand();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void openLocalDirectory(String directory);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}

package library.controllers;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class PorcelainControllerGenerator implements ControllerGenerator {
  @Override
  public CharSequence generate() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package controllers;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.api.Git;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.lib.Ref;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.revwalk.RevCommit;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.transport.RemoteConfig;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import functions.JGitRepositoryAPI;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This controller is used to create custom JGit API calls. (i.e. When a");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* repository is created, create a separate branch for saving the differencing");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* artifacts)");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Should be made a singleton, to prevent multiple pointers to the repositories.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class PorcelainController implements IVcsController {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static private IVcsController instance;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<Git> repositories;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Git workspace;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("JGitRepositoryAPI api;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private PorcelainController() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("repositories = new ArrayList<Git>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("api = JGitRepositoryAPI.getInstance();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static IVcsController getInstance() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (instance == null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("instance = new PorcelainController();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return instance;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return instance;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<Git> getRepositories() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return repositories;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void registerRepository(Git repo) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// If it is the first repository added, switch the workspace to it.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (repositories.size() == 0) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("changeWorkspace(repo);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("repositories.add(repo);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// TODO UNTESTED. I don\'t know what the format looks like, I\'m just taking a");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// stab in the dark that the name of the repository is contained in the ID of");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// the repository.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Git getRepository(String name) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Git result = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Git repo : repositories) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (repo.getRepository().getIdentifier().contains(name)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("result = repo;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Get the current work directory and may return null if no repository have been");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* initialized.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return {@link Git} or {@link <code>null</code>}");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Git getWorkspace() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return workspace;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Change the current working directory to execute the commands on.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void changeWorkspace(Git repo) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("workspace = repo;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void initLocalDirectory(String directory) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("registerRepository(api.initLocalDirectory(directory));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void checkoutCommand(Git git, String branchName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("api.checkoutCommand(git, branchName);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addCommand(Git git, List<String> paths) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Investigate whether I should look only for .xmi files and make a helper");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// class for this");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("api.addCommand(git, paths);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void createBranch(Git git, String branchName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("api.createBranch(git, branchName);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void fetchCommand(Git git, String remoteName, String remoteBranchName, String username, String password) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO change how the credentials are handled, because it is not viable at this");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// moment. Need to implement a usable password manager.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("api.fetchCommand(git, remoteName, remoteBranchName, username, password);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void remoteAddCommand(String remoteHttpUrl, String remoteName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("api.remoteAddCommand(getWorkspace(), remoteHttpUrl, remoteName);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void rmCommand(List<String> paths) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("api.rmCommand(getWorkspace(), paths);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<Ref> getBranches() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return api.branchListCommand(getWorkspace());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<String> getBranchesClean() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<Ref> branchList = getBranches();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return cleanBranches(branchList);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected List<String> cleanBranches(List<Ref> branchList) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<String> branchListClean = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Ref ref : branchList) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("branchListClean.add(ref.getName());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return branchListClean;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<Ref> getRemoteBranches() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return api.remoteBranchListCommand(getWorkspace());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<String> getRemoteBranchesClean() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<Ref> branchList = getRemoteBranches();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return cleanBranches(branchList);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<RemoteConfig> remoteList() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return api.remoteListCommand(getWorkspace());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<String> remoteListClean() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<RemoteConfig> remoteList = remoteList();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return cleanRemoteList(remoteList);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected List<String> cleanRemoteList(List<RemoteConfig> remoteList) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<String> remoteListClean = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (RemoteConfig ref : remoteList) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("remoteListClean.add(ref.getName());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return remoteListClean;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void checkoutCreateCommand(Git git, String branchName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("api.checkoutCreateCommand(git, branchName);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void cloneRepository(String remoteRepo, String directory, String username, String password,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Boolean cloneAllbranches) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("api.cloneRepository(remoteRepo, directory, username, password, cloneAllbranches);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void commit(String commitMessage) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("api.commitCommand(getWorkspace(), commitMessage);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void pullCommand(String username, String password) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("api.pullCommand(getWorkspace(), username, password);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void pushCommand(String username, String password) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("api.pushCommand(getWorkspace(), username, password);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This method is used to access the history of commits. Since there is no");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* parameter needed, calling this method here should be sufficient, instead of");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* making a handler and dialog for it.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return a list of all commits in order");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Iterable<RevCommit> logCommand() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return api.getLog(getWorkspace());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Opens a pre-existing Git directory");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return a {@code Git} repository");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void openLocalDirectory(String directory) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("registerRepository(api.openLocalRepository(directory));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}

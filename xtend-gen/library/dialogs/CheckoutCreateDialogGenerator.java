package library.dialogs;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class CheckoutCreateDialogGenerator implements DialogGenerator {
  @Override
  public CharSequence generate() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package dialogs;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.swt.SWT;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.layout.GridData;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.layout.GridLayout;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Combo;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Composite;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Control;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Shell;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Text;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class CheckoutCreateDialog extends DialogUtils {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<String> branches;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Combo combo;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String selection;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Text text;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public CheckoutCreateDialog(Shell parentShell, List<String> branches) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(parentShell,");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\"CheckoutCreate is used to change between branches and create a new branch if it doesn\'t exist.\",");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\"Select a pre-existing branch to switch to or type the name of your new branch. This will use the current HEAD as the basis of the new branch.\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setHelpAvailable(false);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.branches = branches;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void create() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.create();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void configureShell(Shell newShell) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.configureShell(newShell);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("newShell.setText(\"CheckoutCreateDialog\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected Control createDialogArea(Composite parent) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setMessage(message);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setTitle(title);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Composite area = (Composite) super.createDialogArea(parent);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Main container in which text labels can be inserted");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Composite container = new Composite(area, SWT.NONE);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("container.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GridLayout layout = new GridLayout(2, false);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("container.setLayout(layout);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Create the first label and its combo box");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("createLabel(container, \"Please select which branch you would like to checkout: \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("combo = createComboButtons(container, branches);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Create another label with a text box");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("createLabel(container, \"Or write the name of your new branch: \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("text = createText(container, true, false);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return super.createDialogArea(parent);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void okPressed() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("saveInput();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.okPressed();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Save the combo selection if nothing is written in the text box, otherwise");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// take the text box");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void saveInput() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (text.getText() == null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("selection = combo.getItem(combo.getSelectionIndex());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("selection = text.getText();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getBranchSelection() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return selection;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}

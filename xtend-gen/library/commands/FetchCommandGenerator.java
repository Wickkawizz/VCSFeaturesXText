package library.commands;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class FetchCommandGenerator implements CommandGenerator {
  @Override
  public CharSequence generate() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package commands;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.api.Git;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import controllers.PorcelainController;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class FetchCommand implements ICommand {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The repository to execute the command on");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Git git;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The username for credentials");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String username;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The password for credentials");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String password;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The name of the remote repository i.e. \"origin\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String remoteName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// The name of the remote branch to fetch updates from");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String remoteBranchName;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Constructor gathers information to execute the command");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public FetchCommand(Git git, String remoteName, String remoteBranchName, String username, String password) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.git = git;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.remoteName = remoteName;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.remoteBranchName = remoteBranchName;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.username = username;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.password = password;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Fetch changes upstream.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void call() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PorcelainController.getInstance().fetchCommand(git, remoteName, remoteBranchName, username, password);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}

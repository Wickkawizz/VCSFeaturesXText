package library.functions;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class JGitRepositoryAPIGenerator {
  public CharSequence generate() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package functions;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import static org.eclipse.jgit.lib.Constants.R_HEADS;");
    _builder.newLine();
    _builder.append("import static org.eclipse.jgit.lib.Constants.R_REMOTES;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.net.URISyntaxException;");
    _builder.newLine();
    _builder.append("import java.util.Collection;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.api.CreateBranchCommand.SetupUpstreamMode;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.api.Git;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.api.ListBranchCommand.ListMode;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.api.MergeResult;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.api.PullResult;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.api.PushCommand;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.api.RemoteAddCommand;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.api.Status;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.api.errors.GitAPIException;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.dircache.DirCache;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.errors.AmbiguousObjectException;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.errors.IncorrectObjectTypeException;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.errors.NoWorkTreeException;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.errors.RevisionSyntaxException;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.lib.Constants;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.lib.ObjectId;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.lib.Ref;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.lib.RefUpdate.Result;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.lib.Repository;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.merge.MergeStrategy;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.revwalk.RevCommit;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.revwalk.RevWalk;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.transport.FetchResult;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.transport.RemoteConfig;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.transport.TrackingRefUpdate;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.transport.URIish;");
    _builder.newLine();
    _builder.append("import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// The high level commands, less granular.");
    _builder.newLine();
    _builder.append("// Guide: https://www.javacodegeeks.com/2015/12/getting-started-jgit.html");
    _builder.newLine();
    _builder.append("// https://www.codeaffine.com/2015/12/15/getting-started-with-jgit/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class JGitRepositoryAPI {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static JGitRepositoryAPI api;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JGitRepositoryAPI() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static JGitRepositoryAPI getInstance() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (api == null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("api = new JGitRepositoryAPI();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return api;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Start a new repository at a given location");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Git initLocalDirectory(String directory) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return initLocalDirectory(directory, null);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Start a new repository with different work and Git directories. This is");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* useful if the work directory needs to be separated from the Git directory");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* (i.e. backup or shared file system through a server)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Git initLocalDirectory(String workDirectory, String gitDirectory) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (gitDirectory != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return Git.init().setDirectory(new File(workDirectory)).setGitDir(new File(gitDirectory)).call();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Git.init().setDirectory(new File(workDirectory)).call();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Create a default branch main");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// git.branchCreate().setName(\"main\").setStartPoint(CommitCommand(\"This is a new");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Branch!\")).call();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IllegalStateException e) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Though remote repositories – like the name suggests – are usually stored on a");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* remote host, the location given in setURI() can also be a path to a local");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* resource.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Authentication: https://www.codeaffine.com/2014/12/09/jgit-authentication/");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Clone with multiple branches:");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* https://www.vogella.com/tutorials/JGit/article.html");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Git cloneRepository(String remoteRepo, String directory, String username, String password,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Boolean cloneAllbranches) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// remoteRepo should be something like this: https://github.com/eclipse/jgit.git");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// directory should be like : /path/to/repo");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Make the credentials provider save the information somewhere in the");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// object, so it doesn\'t have to recall it everytime.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Also check if there is a way to reuse the internal DataStore for passwords");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// used by EGit/JGit");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Git.cloneRepository().setURI(remoteRepo).setDirectory(new File(directory))");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(".setCloneAllBranches(cloneAllbranches)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(".setCredentialsProvider(new UsernamePasswordCredentialsProvider(username, password)).call();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("* However the destination location is chosen, explicitly through your code or");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("* by JGit, the designated directory must either be empty or must not exist.");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Git openLocalRepository(String directory) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// directory should be like : /path/to/repo");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* Could add more granularity with FileRepositoryBuilder (More for plumbing");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* maybe) It would also permit me to check whether or not the repository exist");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* before calling it, prevent some errors. Worth investigating");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Git.open(new File(directory));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Add files to the index (Staging area)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* The path given to addFilePattern() must be relative to the work directory");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* root. If a path does not point to an existing file, it is simply ignored.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This means I should be careful for files that aren\'t added and report them to");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* the user if necessary.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* So \"readme.txt\" means its at the root level of the repository.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Passing a ‘.’ will add all files within the work directory recursively.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public DirCache addCommand(Git git, List<String> paths) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DirCache index = null;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Example to add a simple readme.txt");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (String path : paths) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("index = git.add().addFilepattern(path).call();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("index.getEntryCount(); // Returns the number of entries that were entered. If it doesn\'t match the");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// number entered in parameter.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO This might be a dumb check. Verify if this is really needed.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (index.getEntryCount() != paths.size()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"Some entries have not been added.\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return index;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public RevCommit commitCommand(Git git, String commitMessage) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO How to set the branch the commit is going to be on? Change the git... to");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// something specific?");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("RevCommit commit = git.commit().setMessage(commitMessage).call(); // The author and committer are taken from");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return commit; // the configuration if not denoted with");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// the accordingly labeled methods.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Counterpart of the AddCommand. Removes files specified by paths.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* No wildcards can be used here. Need to be specified individually.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param cached true = files deleted from work directory; false = files kept in");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*               work directory (can be added again later)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public DirCache rmCommand(Git git, List<String> paths, Boolean cached) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("DirCache index = null;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Example to add a simple readme.txt");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (String path : paths) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// Unless .setCached(true) was specified, the file will also be deleted from the");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// work directory.");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("index = git.rm().addFilepattern(path).setCached(cached).call();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("index.getEntryCount(); // Returns the number of entries that were entered. If it doesn\'t match the");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// number entered in parameter.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return index;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Counterpart of the AddCommand. Removes files specified by paths.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* No wildcards can be used here. Need to be specified individually.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* rm command without cache (files deleted from work directory)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public DirCache rmCommand(Git git, List<String> paths) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return rmCommand(git, paths, false);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Status getStatus(Git git) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return git.status().call(); // addPath(), the StatusCommand can be configured to show only the status of");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("// certain files.");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (NoWorkTreeException | GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Status getStatus(Git git, String path) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// addPath(), the StatusCommand can be configured to show only the status of");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// certain files.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return git.status().addPath(path).call();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (NoWorkTreeException | GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This functions returns the commit history with various informations linked to");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* them.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return List of commits in order");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Iterable<RevCommit> getLog(Git git) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return git.log().call();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Avoids a possible resource leak that occurs because the RevWalk that is used");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* internally by the LogCommand is never closed.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This is according to the guide (2014) and might be fixed today.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Recommend using getLog() instead.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void getLogSafe(Git git) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Repository repository = git.getRepository();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try (RevWalk revWalk = new RevWalk(repository)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ObjectId commitId = repository.resolve(\"refs/heads/side-branch\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("revWalk.markStart(revWalk.parseCommit(commitId));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (RevCommit commit : revWalk) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(commit.getFullMessage());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (RevisionSyntaxException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (AmbiguousObjectException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IncorrectObjectTypeException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Push the current commits to the remote.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Should call \"RemoteAddCommand()\" before if no remote repository has been set.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* This is for pushing all pending commits to the target repository. Does not");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* check if a repository is set beforehand and does not check for specific");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* branches (to my knowledge, needs more testing).");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// TODO check SO for how to push for specific branches (plumbing API)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void pushCommand(Git git, String username, String password) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// SO:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// https://stackoverflow.com/questions/13446842/how-do-i-do-git-push-with-jgit");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PushCommand pushCommand = git.push();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("pushCommand.setCredentialsProvider(new UsernamePasswordCredentialsProvider(username, password));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// you can add more settings here if needed");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("pushCommand.call();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* Old version: https://www.codeaffine.com/2015/12/15/getting-started-with-jgit/");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* // Local should be the local repository. Iterable<PushResult> iterable =");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* local.push().call(); PushResult pushResult = iterable.iterator().next();");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* org.eclipse.jgit.transport.RemoteRefUpdate.Status status =");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* pushResult.getRemoteUpdate(\"refs/heads/master\") .getStatus();");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Fetch remote changes at the target repository with the given name and the");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* target branch.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param remoteName       (i.e. \"origin\")");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param remoteBranchName (i.e. \"master\")");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return result the list of changes from the remote");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Result fetchCommand(Git git, String remoteName, String remoteBranchName, String username, String password) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("FetchResult fetchResult = git.fetch()");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(".setCredentialsProvider(new UsernamePasswordCredentialsProvider(username, password)).call();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("TrackingRefUpdate refUpdate = fetchResult");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(".getTrackingRefUpdate(\"refs/remotes/\" + remoteName + \"/\" + remoteBranchName);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Result result = refUpdate.getResult();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Calls the fetchCommand() with default parameters \"origin\" and \"master\"");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return result the list of changes from the remote");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Result fetchCommand(Git git, String username, String password) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return fetchCommand(git, \"origin\", \"master\", username, password);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// https://www.javacodegeeks.com/2015/12/clone-git-repositories-jgit.html");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* Returns a list of all the branches a remote repository has to offer */");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Collection<Ref> remoteRefs(String remote) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Collection<Ref> remoteRefs = Git.lsRemoteRepository().setHeads(true).setRemote(remote).call();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return remoteRefs;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Adds a remote repository to the git instance and gives it a custom name.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void remoteAddCommand(Git git, String remoteHttpUrl, String remoteName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("RemoteAddCommand remoteAddcommand = git.remoteAdd();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("remoteAddcommand.setName(remoteName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("remoteAddcommand.setUri(new URIish(remoteHttpUrl));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (URISyntaxException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("remoteAddcommand.call();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Adds a remote repository to the git instance with the default name \"origin\".");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void remoteAddCommand(Git git, String remoteHttpUrl) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("remoteAddCommand(git, remoteHttpUrl, \"origin\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Create a new branch with a given name.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return reference to the branch");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Ref createBranch(Git git, String name) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Ref headRef;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("headRef = git.getRepository().getRefDatabase().findRef(Constants.HEAD);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (headRef == null || headRef.getObjectId() == null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"WARNING: No initial commit has been made.\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"Creating initial commit...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("commitCommand(git, \"Initial commit\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"\'master\' branch created and initial commit done.\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return git.branchCreate().setName(name).call();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return git.branchCreate().setName(name).call();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IOException | GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Create a new branch with a given name and a commit to start from.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return reference to the branch");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Ref createBranch(Git git, String name, RevCommit commit) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO check if locally created branches get pushed to a remote repository");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// automatically");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return git.branchCreate().setName(name).setStartPoint(commit).call();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Repository getRepository(Git git) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return git.getRepository();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Checkout another branch.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param branchName The name of the branch to checkout");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Ref checkoutCommand(Git git, String branchName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return git.checkout().setName(branchName).call();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Create a new branch and checkout to it. Setup a tracker to a remote branch");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* and set the start point.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Mandatory to pull a remote branch locally.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param branchName     The name of the new branch to be created");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param startPointName The name of the branch you should create the new branch");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*                       from (start point)");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// TODO Maybe rename this method to something more meaningful like");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// pullRemoteBranchLocally");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Ref checkoutCreateCommand(Git git, String branchName, String startPointName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return git.checkout().setCreateBranch(true).setName(branchName).setUpstreamMode(SetupUpstreamMode.TRACK)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(".setStartPoint(\"origin/\" + startPointName).call();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("checkoutCommand(git, branchName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Create a new branch and checkout to it. The start point is the current HEAD");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* for the new branch.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param branchName The name of the new branch to be created");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Ref checkoutCreateCommand(Git git, String branchName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return git.checkout().setCreateBranch(true).setName(branchName).call();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<Ref> branchListCommand(Git git) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return git.branchList().call();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<Ref> remoteBranchListCommand(Git git) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return git.branchList().setListMode(ListMode.REMOTE).call();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<RemoteConfig> remoteListCommand(Git git) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return git.remoteList().call();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Basic Pull operation for merging incoming changes into the local repository.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public PullResult pullCommand(Git git, String username, String password) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return git.pull().setCredentialsProvider(new UsernamePasswordCredentialsProvider(username, password))");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(".call();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Merge a given remote branch with the current HEAD.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// SO:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// https://stackoverflow.com/questions/36372274/how-to-get-conflicts-before-merge-with-jgit");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// DSMCompare?");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public MergeResult mergeRemoteCommand(Git git, String branchName, MergeStrategy mergeStrategy) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return git.merge().setStrategy(mergeStrategy).include(git.getRepository().exactRef(R_REMOTES + branchName))");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(".call();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IOException | GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Merge a given local branch with the current HEAD.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// SO:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// https://stackoverflow.com/questions/36372274/how-to-get-conflicts-before-merge-with-jgit");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public MergeResult mergeLocalCommand(Git git, String branchName, MergeStrategy mergeStrategy) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return git.merge().setStrategy(mergeStrategy).include(git.getRepository().exactRef(R_HEADS + branchName))");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(".call();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (IOException | GitAPIException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}

package library.handlers;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class CommitHandlergenerator {
  public CharSequence generate() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package handlers;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.core.commands.AbstractHandler;");
    _builder.newLine();
    _builder.append("import org.eclipse.core.commands.ExecutionEvent;");
    _builder.newLine();
    _builder.append("import org.eclipse.core.commands.ExecutionException;");
    _builder.newLine();
    _builder.append("import org.eclipse.jface.window.Window;");
    _builder.newLine();
    _builder.append("import org.eclipse.ui.IWorkbenchWindow;");
    _builder.newLine();
    _builder.append("import org.eclipse.ui.handlers.HandlerUtil;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import commands.CommitCommand;");
    _builder.newLine();
    _builder.append("import dialogs.CommitDialog;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class CommitHandler extends AbstractHandler {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("CommitCommand commitCommand;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private CommitDialog dialog;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Object execute(ExecutionEvent event) throws ExecutionException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// get workbench window");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("IWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// If the list is empty or size=1, then there\'s nothing to checkout");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Otherwise, print the list in a dialog (table?)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dialog = new CommitDialog(window.getShell());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Open the dialog");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dialog.create();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// If OK has been pressed, do something");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (dialog.open() == Window.OK) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Simply call the command and execute it.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Create the command and set the path");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Example of a valid path: C:/Users/WickkaWizz/egit-master/ws/Playground2");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO Might be NULL, so needs to catch the exception here, just in case.");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("commitCommand = new CommitCommand(dialog.getCommitMessage());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("commitCommand.call();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}

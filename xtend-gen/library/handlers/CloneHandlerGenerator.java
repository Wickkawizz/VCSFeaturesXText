package library.handlers;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class CloneHandlerGenerator {
  public CharSequence generate() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package handlers;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.core.commands.AbstractHandler;");
    _builder.newLine();
    _builder.append("import org.eclipse.core.commands.ExecutionEvent;");
    _builder.newLine();
    _builder.append("import org.eclipse.core.commands.ExecutionException;");
    _builder.newLine();
    _builder.append("import org.eclipse.jface.window.Window;");
    _builder.newLine();
    _builder.append("import org.eclipse.ui.IWorkbenchWindow;");
    _builder.newLine();
    _builder.append("import org.eclipse.ui.handlers.HandlerUtil;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import commands.CloneCommand;");
    _builder.newLine();
    _builder.append("import dialogs.CloneDialog;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class CloneHandler extends AbstractHandler {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private CloneCommand cloneCommand;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("CloneDialog dialog;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Object execute(ExecutionEvent event) throws ExecutionException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Initialize the window and set the shell");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("IWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dialog = new CloneDialog(window.getShell());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Open the dialog");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dialog.create();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// If OK has been pressed, do something");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (dialog.open() == Window.OK) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Create the command and set the path");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Example of a valid path: C:/Users/WickkaWizz/egit-master/ws/Playground2");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("cloneCommand = new CloneCommand(dialog.getRemoteURL(), dialog.getLocalURL(), dialog.getCloneBranches(),");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("dialog.getUsername(), dialog.getPassword());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("cloneCommand.call();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}

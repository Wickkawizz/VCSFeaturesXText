package library.handlers;

import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class RenameHandlerGenerator {
  public CharSequence generate() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package handlers;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.core.commands.AbstractHandler;");
    _builder.newLine();
    _builder.append("import org.eclipse.core.commands.ExecutionEvent;");
    _builder.newLine();
    _builder.append("import org.eclipse.core.commands.ExecutionException;");
    _builder.newLine();
    _builder.append("import org.eclipse.jface.dialogs.InputDialog;");
    _builder.newLine();
    _builder.append("import org.eclipse.jface.dialogs.MessageDialog;");
    _builder.newLine();
    _builder.append("import org.eclipse.jface.window.Window;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.SWT;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Display;");
    _builder.newLine();
    _builder.append("import org.eclipse.ui.IWorkbenchWindow;");
    _builder.newLine();
    _builder.append("import org.eclipse.ui.handlers.HandlerUtil;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import dialogs.RenamerDialog;");
    _builder.newLine();
    _builder.append("import functions.Renamer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class RenameHandler extends AbstractHandler{");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Renamer renamer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public RenameHandler() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("renamer = Renamer.getRenamer();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Object execute(ExecutionEvent event) throws ExecutionException {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// I use TitleAreaDialog because it lets me collect multiple information from the user, which is what we need. The Command name and the Alias");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Example here: https://www.vogella.com/tutorials/EclipseDialogs/article.html");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("IWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("RenamerDialog dialog = new RenamerDialog(window.getShell());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// just to demonstrate also how to set the title background color");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dialog.setTitleAreaColor(Display.getDefault().getSystemColor(SWT.COLOR_DARK_GRAY).getRGB());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// now open the dialog");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dialog.create();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (dialog.open() == Window.OK) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Collect the command and the alias names from the class");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// TODO change the logic here to set the new alias");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Map<String, String> commands = renamer.setAlias(dialog.getCommandName(), dialog.getAliasName());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"The command: \" + dialog.getCommandName() + \" is now associated with the Alias: \" + commands.get(dialog.getCommandName()));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("//System.out.println(dialog.getCommandName());");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("//System.out.println(dialog.getAliasName());");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Old version with only 1 input");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/*InputDialog dlg = new InputDialog(");
    _builder.newLine();
    _builder.append("\t\t          ");
    _builder.append("HandlerUtil.getActiveShellChecked(event), \"Title\",");
    _builder.newLine();
    _builder.append("\t\t          ");
    _builder.append("\"Enter text\", \"Initial value\", null);");
    _builder.newLine();
    _builder.append("\t\t      ");
    _builder.append("if (dlg.open() == Window.OK) {");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("// User clicked OK; run perl");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("String input = dlg.getValue();");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("System.out.println(renamer.getAlias(input));");
    _builder.newLine();
    _builder.append("\t\t      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t      ");
    _builder.append("return null;*/");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}

/*
 * generated by Xtext 2.32.0
 */
package diro.geodes.serializer;

import com.google.inject.Inject;
import diro.geodes.services.VcsFeaturesGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import vcsFeaturesMM.CollaborationStyle;
import vcsFeaturesMM.Commands;
import vcsFeaturesMM.Database;
import vcsFeaturesMM.HighLevelCommand;
import vcsFeaturesMM.History;
import vcsFeaturesMM.LowLevelCommand;
import vcsFeaturesMM.VCSFeatures;
import vcsFeaturesMM.VcsFeaturesMMPackage;
import vcsFeaturesMM.VersionUnit;

@SuppressWarnings("all")
public class VcsFeaturesSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private VcsFeaturesGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == VcsFeaturesMMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case VcsFeaturesMMPackage.COLLABORATION_STYLE:
				sequence_CollaborationStyle(context, (CollaborationStyle) semanticObject); 
				return; 
			case VcsFeaturesMMPackage.COMMANDS:
				sequence_Commands(context, (Commands) semanticObject); 
				return; 
			case VcsFeaturesMMPackage.DATABASE:
				sequence_Database(context, (Database) semanticObject); 
				return; 
			case VcsFeaturesMMPackage.HIGH_LEVEL_COMMAND:
				sequence_HighLevelCommand(context, (HighLevelCommand) semanticObject); 
				return; 
			case VcsFeaturesMMPackage.HISTORY:
				sequence_History(context, (History) semanticObject); 
				return; 
			case VcsFeaturesMMPackage.LOW_LEVEL_COMMAND:
				sequence_LowLevelCommand(context, (LowLevelCommand) semanticObject); 
				return; 
			case VcsFeaturesMMPackage.VCS_FEATURES:
				sequence_VCSFeatures(context, (VCSFeatures) semanticObject); 
				return; 
			case VcsFeaturesMMPackage.VERSION_UNIT:
				sequence_VersionUnit(context, (VersionUnit) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     CollaborationStyle returns CollaborationStyle
	 *
	 * Constraint:
	 *     collabStyle=CollaborationStyleType?
	 * </pre>
	 */
	protected void sequence_CollaborationStyle(ISerializationContext context, CollaborationStyle semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Commands returns Commands
	 *
	 * Constraint:
	 *     (
	 *         mergeStrategy=MergeStrategy? 
	 *         (highlevelcommand+=HighLevelCommand highlevelcommand+=HighLevelCommand*)? 
	 *         (lowlevelcommand+=LowLevelCommand lowlevelcommand+=LowLevelCommand*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Commands(ISerializationContext context, Commands semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Database returns Database
	 *
	 * Constraint:
	 *     (connectionString=EString DatabaseType=DatabaseType?)
	 * </pre>
	 */
	protected void sequence_Database(ISerializationContext context, Database semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     HighLevelCommand returns HighLevelCommand
	 *
	 * Constraint:
	 *     (name=EString (lowlevelcommand+=[LowLevelCommand|EString] lowlevelcommand+=[LowLevelCommand|EString]*)?)
	 * </pre>
	 */
	protected void sequence_HighLevelCommand(ISerializationContext context, HighLevelCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     History returns History
	 *
	 * Constraint:
	 *     (labelType=LabelType? commitHistoryRange=EInt? numberOfBranches=EInt?)
	 * </pre>
	 */
	protected void sequence_History(ISerializationContext context, History semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LowLevelCommand returns LowLevelCommand
	 *
	 * Constraint:
	 *     (name=EString command=LowCommands)
	 * </pre>
	 */
	protected void sequence_LowLevelCommand(ISerializationContext context, LowLevelCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VcsFeaturesMMPackage.Literals.LOW_LEVEL_COMMAND__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VcsFeaturesMMPackage.Literals.LOW_LEVEL_COMMAND__NAME));
			if (transientValues.isValueTransient(semanticObject, VcsFeaturesMMPackage.Literals.LOW_LEVEL_COMMAND__COMMAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VcsFeaturesMMPackage.Literals.LOW_LEVEL_COMMAND__COMMAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLowLevelCommandAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLowLevelCommandAccess().getCommandLowCommandsEnumRuleCall_4_0(), semanticObject.getCommand());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VCSFeatures returns VCSFeatures
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (commands+=Commands commands+=Commands*)? 
	 *         (history+=History history+=History*)? 
	 *         (versionunit+=VersionUnit versionunit+=VersionUnit*)? 
	 *         (collaborationstyle+=CollaborationStyle collaborationstyle+=CollaborationStyle*)? 
	 *         (database+=Database database+=Database*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_VCSFeatures(ISerializationContext context, VCSFeatures semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VersionUnit returns VersionUnit
	 *
	 * Constraint:
	 *     (granularity+=VersionUnitType granularity+=VersionUnitType*)?
	 * </pre>
	 */
	protected void sequence_VersionUnit(ISerializationContext context, VersionUnit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

// automatically generated by Xtext
grammar diro.geodes.VcsFeatures with org.eclipse.xtext.common.Terminals

import "http://www.example.org/vcsFeaturesMM" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

VCSFeatures returns VCSFeatures:
	{VCSFeatures}
	'VCSFeatures'
	name=EString
	
		'#' ('COMMANDS'  commands+=Commands ( "," commands+=Commands)*  )?
		'#' ('HISTORY'  history+=History ( "," history+=History)*  )?
		'#' ('VERSIONNING'  versionunit+=VersionUnit ( "," versionunit+=VersionUnit)*  )?
		'#' ('COLLABORATION' 'STYLE'  collaborationstyle+=CollaborationStyle ( "," collaborationstyle+=CollaborationStyle)* )?
		'#' ('DATABASES'  database+=Database (database+=Database)*  )?
	;








Commands returns Commands:
	{Commands}
		 ('Merge' 'tool:' mergeStrategy=MergeStrategy)?
		 ('Basic' 'command' 'declaration:' lowlevelcommand+=LowLevelCommand (lowlevelcommand+=LowLevelCommand)* )?
		 ('Super' 'command' 'declaration:' highlevelcommand+=HighLevelCommand (highlevelcommand+=HighLevelCommand)* )?
		;

History returns History:
	{History}

		('Identifying' 'label:' labelType=LabelType)?
		('Version' 'history' 'backlog:' commitHistoryRange=EInt)?
		('Maximum' 'number' 'of' 'branches:' numberOfBranches=EInt)?
		;

VersionUnit returns VersionUnit:
	{VersionUnit}
		'Detail' 'level:' (granularity+=VersionUnitType (granularity+=VersionUnitType)* )?
		;

CollaborationStyle returns CollaborationStyle:
	{CollaborationStyle}
		'Working:' collabStyle=CollaborationStyleType
		;

Database returns Database:
	{Database}
	'DB' DatabaseType=DatabaseType '@' connectionString=EString
		;

EString returns ecore::EString:
	STRING | ID;

enum MergeStrategy returns MergeStrategy:
				DSMCompare = 'DSMCompare' | GitDiff = 'GitDiff';

HighLevelCommand returns HighLevelCommand:
	{HighLevelCommand}
	'-' 'Super' 'command' name=EString ( 'with' lowlevelcommand+=[LowLevelCommand|EString] ( "->" lowlevelcommand+=[LowLevelCommand|EString])* )?
		;

LowLevelCommand returns LowLevelCommand:
	'-' 'Command' 'use' command=LowCommands 'as' name=EString
		;

enum LowCommands returns LowCommands:
				Add = 'Add' | Checkout = 'Checkout' | CheckoutCreate = 'CheckoutCreate' | Clone = 'Clone' | Commit = 'Commit' | CherryPick = 'CherryPick' | CreateBranch = 'CreateBranch' | Fetch = 'Fetch' | Init = 'Init' | Pull = 'Pull' | Push = 'Push' | RemoteAdd = 'RemoteAdd' | Rm = 'Rm' | Log = 'Log' | Open = 'Open';

enum LabelType returns LabelType:
				Unique = 'Unique' | CommitHash = 'CommitHash' | Label = 'Label';

EInt returns ecore::EInt:
	'-'? INT;

enum VersionUnitType returns VersionUnitType:
				Line = 'Line' | Semantic = 'Semantic' | File = 'File' | Element = 'Element';

enum CollaborationStyleType returns CollaborationStyleType:
				LocalOnly = 'LocalOnly' | Remote = 'Remote';

enum DatabaseType returns DatabaseType:
				MongoDB = 'MongoDB' | XMI = 'XMI' | Neo4J = 'Neo4J' | SQL = 'SQL';
